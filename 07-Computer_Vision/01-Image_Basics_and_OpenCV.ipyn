{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Image Basics and Pixel Operations\n",
    "\n",
    "### Objective\n",
    "Understand what digital images are, how they are represented as pixel matrices, and perform basic pixel-level operations using Python and OpenCV."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Introduction to Digital Images\n",
    "\n",
    "- **Definition:** An image is a 2D matrix of pixel intensity values.  \n",
    "- **Color images:** Represented as three channels (Red, Green, Blue).  \n",
    "- **Grayscale images:** Contain only intensity values (0â€“255).  \n",
    "- **Shape of image in NumPy:**\n",
    "  - Grayscale â†’ `(height, width)`\n",
    "  - Color â†’ `(height, width, 3)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "# Read an image\n",
    "img = cv2.imread('sample.jpg')\n",
    "\n",
    "# Convert BGR to RGB for matplotlib display\n",
    "img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n",
    "\n",
    "# Display\n",
    "plt.imshow(img_rgb)\n",
    "plt.title(\"Original Image\")\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Notes:**\n",
    "- OpenCV reads images in **BGR** format.\n",
    "- Matplotlib expects **RGB**, hence the conversion."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Image Channels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "b, g, r = cv2.split(img)\n",
    "plt.figure(figsize=(12,4))\n",
    "plt.subplot(1,3,1); plt.imshow(r, cmap='gray'); plt.title('Red Channel')\n",
    "plt.subplot(1,3,2); plt.imshow(g, cmap='gray'); plt.title('Green Channel')\n",
    "plt.subplot(1,3,3); plt.imshow(b, cmap='gray'); plt.title('Blue Channel')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Concept:**\n",
    "- Each color image = combination of 3 color matrices.\n",
    "- You can modify individual channels for color effects."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Pixel Access and Manipulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Access pixel value (row=50, col=100)\n",
    "(b, g, r) = img[50, 100]\n",
    "print(\"Blue:\", b, \"Green:\", g, \"Red:\", r)\n",
    "\n",
    "# Modify a pixel\n",
    "img[50, 100] = (0, 255, 0)  # Green"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Example Use Cases:**\n",
    "- Region-based editing\n",
    "- Masking\n",
    "- Image filtering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Image Cropping and Resizing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Crop a region\n",
    "cropped = img[50:200, 100:300]\n",
    "\n",
    "# Resize\n",
    "resized = cv2.resize(img, (200, 200))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Explanation:**\n",
    "- Cropping = slicing a NumPy array.\n",
    "- Resizing helps standardize image input size for models."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Basic Pixel Operations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| Operation | Description | Example |\n",
    "|------------|--------------|----------|\n",
    "| Addition | Brightens image | `cv2.add(img, value)` |\n",
    "| Subtraction | Darkens image | `cv2.subtract(img, value)` |\n",
    "| Bitwise | Logical masking | `cv2.bitwise_and(img, mask)` |\n",
    "| Thresholding | Segmentation | `cv2.threshold(gray, 120, 255, cv2.THRESH_BINARY)` |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "_, thresh = cv2.threshold(gray, 120, 255, cv2.THRESH_BINARY)\n",
    "plt.imshow(thresh, cmap='gray')\n",
    "plt.title('Thresholded Image')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Key Takeaways\n",
    "- Images are arrays; every pixel can be accessed or modified.\n",
    "- Color channels allow control over RGB composition.\n",
    "- Pixel-level operations are the foundation for filtering, segmentation, and object detection."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ðŸ§ª 8. Exercises\n",
    "1. Load a new image and extract only the red channel.\n",
    "2. Convert an image to grayscale manually (by averaging channels).\n",
    "3. Write a script to increase image brightness by 30%."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

